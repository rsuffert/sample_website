/* . p/ referenciar classes e # p/ referenciar ids */

body {
    width: 100%;
    height: 100%;
    margin: 0 auto; /* remove as scroll bars (reseta o padrao de estilizacao dado pelo navegador ao body) */
    /* o processo de definir um conjunto consistente de estilos para elementos HTML, garantindo que sejam visualmente consistentes, independentemente do navegador ou SisOp, eh chamado "normalizacao" */
    /* geralmente eh aplicada por meio da redefinicao das propriedades padrao de varios elementos do HTML, como o que estamos fazendo aqui */
    /* existem diversas bibliotecas de normalizacao de CSS, como o Normalize.css, que visa normalizar os estilos de elementos  HTML em todos os navegadores */
    /* na pratica, esta centralizando horizontalmente */
}

ul {
    padding: 0px; /* deixa os elementos da ul sem padding dentro da div.menu (por padrao, o Chrome coloca um padding que nós não queremos, entao estamos sobrescrevendo). Poderia ser resolvido também com a biblioteca do Normalize.css */
}

.menu-principal {
    width: 100%; /* para o menu principal assumir 100% da tela */
    background-color: #252323;
    height: 60px;
    
}

main {
    width: 980px;
    position: relative;
    margin: 0 auto; /* centraliza a div horizontalmente dentro de seu conteiner */
}

.logo {
    padding: 16px;
    width: 70%; /* para caber as imagens das redes sociais dentro da div preta (header) */
    float: left;
}

.redes-sociais ul li { /* remover os bullet points da lista e fazer as imagens ficarem lado a lado */
    display: inline-block;
    float: left; /* posiciona os elementos o mais a esquerda possivel dentro de seu conteiner */
    list-style: none; /* tambem removeria os bullet points da lista */
    margin-left: 25px; /* coloca um espaco entre os itens da lista das redes sociais */
}

.redes-sociais {
    width: 25%;
    float: right;
}

.header-2 {
    background-color: #ffffff;
    width: 980px;
    margin: 0 auto;
    padding: 16px;
}

.menu ul li { /* modificar os itens da lista */
    display: inline-block; /* coloca os itens da lista lado a lado */
    color: #8b8b8b;
    margin-left: 15px;
    height: 50px; /* altura para distancia do sublinado para o item da lista */
}

.menu ul li a:hover {
    color: #00bac6;
}

.menu ul li:hover {
    border-bottom: 3px solid #00bac6; /* sublinhado do item selecionado (pertence ao li, nao ao a (link)). O sublinhado e solid, mas podia ser dotted, dashed etc. */
}

.menu ul li a { /* pegar apenas os hiperlinks */
    color: #8b8b8b;
    text-decoration: none; /* remove o sublinhado do hiperlink */
    font-size: 18px;
    text-transform: uppercase;
}

.menu {
    width: 70%;
    float: left;
}

.busca {
    width: 30%;
    float: right;
    text-align: center; /* centralizando a caixa do input dentro da div da busca */
}

.busca input {
    background-image: url('../img/icone-search.png');
    background-repeat: no-repeat; /* sem essa propriedade, a imagem se repete, preenchendo todo o background do input */
    background-position: 96%; /* colocando a imagem a direita da div e deixando um pequeno espaco da borda direita (nessa mesma propriedade, pode-se estabelecer, junto, a altura da imagem dentro da div ou, entao, usar 'right' ou 'left' em vez de percentual) */
    margin-top: 10px;
    height: 36px;
    padding: 12px;
    width: 190px;
    border: 1px solid; /* espessura da borda e que ela é solida */
    border-color: #d6d6d6;
}

.col-100 {
    width: 100%;
    float: left;
    position: relative;
}

.menu-urls {
    border-bottom: 3px solid #efefef;
    height: 80px;
}

button.slick-prev { /* inspecionando o elemento, eh possivel ver que o botao do carrosel esta atribuido a essa classe. Ao adicionar button na frente, apenas os elementos HTML do tipo button que pertencem a essa classe serao modificados, e nao todos os elementos da classe */
    /* resetando o botao */
    font-size: 0px;
    border: none;
    background-color: transparent;
    /* configurando o botao com as caracteristicas (valores) da imagem da seta */
    height: 51px;
    width: 25px;
    background-image: url('../img/anterior.png');
    /* posiiconando o botao */
    position: absolute; /* com position: relative, o elemento fica ocupando seu espaço no fluxo normal da pagina, ou seja, outros elementos na pagina sao posicionados levando em conta o espaco que o elemento ocupa, mesmo que sejam alteradas as propriedades "top", "bottom", "left" e "right". Com position:absolute, o elemento é retirado do fluxo normal da pagina e pode ser posicionado em qualquer lugar dentro do elemento pai que tenha uma posicao definida, sem afetar outros elementos na pagina. Assim, ele pode ser posicionado de forma absoluta usando as propriedades "top", "bottom", "left" e "right". "Relative" posiciona elementos com relacao a sua posicao original, enquanto "absolute" posiciona com relacao ao elemento pai mais proximo que tenha uma posicao definida (seja ela "relative" ou "absolute", mas nao "static", que eh o valor padrao) */
    z-index: 9; /* permite posicionar o elemento em cima de outras layers. Como seu valor eh 9, sua ordem de empilhamento eh maior do que outros elementos com valores z-index menores ou sem valor definido */
    top: 25%;
    left: 15%; /* posicionando o quao a esquerda deve estar o botao */
}

button.slick-next { /* inspecionando o elemento, eh possivel ver que o botao do carrosel esta atribuido a essa classe. Ao adicionar button na frente, apenas os elementos HTML do tipo button que pertencem a essa classe serao modificados, e nao todos os elementos da classe */
    /* resetando o botao */
    font-size: 0px;
    border: none;
    background-color: transparent;
    /* configurando o botao com as caracteristicas (valores) da imagem da seta */
    height: 51px;
    width: 25px;
    background-image: url('../img/proximo.png');
    /* posiiconando o botao */
    position: absolute; /* com position: relative, o elemento fica ocupando seu espaço no fluxo normal da pagina, ou seja, outros elementos na pagina sao posicionados levando em conta o espaco que o elemento ocupa, mesmo que sejam alteradas as propriedades "top", "bottom", "left" e "right". Com position:absolute, o elemento é retirado do fluxo normal da pagina e pode ser posicionado em qualquer lugar dentro do elemento pai que tenha uma posicao definida, sem afetar outros elementos na pagina. Assim, ele pode ser posicionado de forma absoluta usando as propriedades "top", "bottom", "left" e "right". "Relative" posiciona elementos com relacao a sua posicao original, enquanto "absolute" posiciona com relacao ao elemento pai mais proximo que tenha uma posicao definida (seja ela "relative", "absolute" ou "fixed", mas nao "static", que eh o valor padrao) */
    z-index: 9; /* permite posicionar o elemento em cima de outras layers. Como seu valor eh 9, sua ordem de empilhamento eh maior do que outros elementos com valores z-index menores ou sem valor definido */
    top: 25%;
    right: 12%; /* posicionando o quao a direita deve estar o botao */
}

.slider-principal img { /* garantindo que o slider vai ocupar a tela toda, e que nao vai ter uma barra de rolagem abaixo dele que permite acessar todas as imagens */
    /* no fim, acabou centralizando melhor o carrossel tbm */
    width: 100%!important; /* (!important apenas para exemplificar; nao eh necessario)!important força uma regra a ter precedencia sobre outras, sobrescrevendo qualquer outra propriedade que possa ter sido definida anteriormente para o mesmo elemento, independentemente de sua especificidade. Se uma regra de menor especificidade entra em conflito com uma de maior especificidade, eh aplicada a de menor especificidade, a nao ser que se use um !important */
}

.slick-initialized {
    overflow: hidden; /* garantindo que nao havera o scroll infinito do carrossel (garante que o conteudo do elemento nao sera exibido fora de seus limites) */
}

.slick-dots li button { /* estilizando os botoes do carrossel, que eh uma lista (ul) cujos itens (li) sao botoes */
    font-size: 0px; /* removendo a numeracao dos botoes */
    border: 3px solid #ffffff;
    width: 20px;
    height: 20px;
    background: transparent;
    border-radius: 50%;
    cursor: pointer; /* define que, ao repousar o mouse sobre os botoes, o mouse se torna um dedo indicador, indicando que o componente pode ser clicado */
}

.slick-dots { /* posicionando os dots */
    margin: 0 auto;
    width: 50%;
    position: absolute;
    left: 45%;
    top: 60%;
}

.slick-dots li { /* exibindo todos os elementos da lista lado a lado */
    display: inline-block; /* exibindo todos os elementos da lista lado a lado */
    padding-left: 10px; /* definindo a distancia entre os itens da lista */
}

li.slick-active button { /* selecionando todas as li's da classe "slick-active", pegando seu botao e definindo suas caracteristicas */
    background-color: #00bac6;
}